name: PixelFocus Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run PixelFocus Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Run Timer Tests
      run: npm run test:timer
      
    - name: Run UI Tests
      run: npm run test:ui
      
    - name: Run Full Test Suite
      run: npm test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 7

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: |
        # Check if files are properly formatted
        echo "Checking code formatting..."
        # Add any formatting checks here if needed

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Build project
      run: npm run build
      
    - name: Verify build artifacts
      run: |
        # Check if files are properly formatted
        ls -la
        echo "Build verification completed"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Deploy to GitHub Pages (Preview)
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: preview/${{ github.event.number }}
        force_orphan: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        force_orphan: true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.test.result == 'success' && needs.lint.result == 'success' && needs.build.result == 'success'
      run: |
        echo "üéâ All tests passed! PixelFocus is ready for production!"
        echo "‚úÖ Test Suite: PASSED"
        echo "‚úÖ Code Quality: PASSED"
        echo "‚úÖ Build: PASSED"
        
    - name: Notify on Failure
      if: needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå Some checks failed. Please review the logs."
        echo "Test Suite: ${{ needs.test.result }}"
        echo "Code Quality: ${{ needs.lint.result }}"
        echo "Build: ${{ needs.build.result }}"
